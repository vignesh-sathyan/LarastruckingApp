

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace LarastruckingApp.Repository.EF
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class LarastruckingDBEntities : DbContext
{
    public LarastruckingDBEntities()
        : base("name=LarastruckingDBEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<FreightPricingMapping> FreightPricingMappings { get; set; }

    public virtual DbSet<tblAccessorialFeesType> tblAccessorialFeesTypes { get; set; }

    public virtual DbSet<tblAccidentDocument> tblAccidentDocuments { get; set; }

    public virtual DbSet<tblAccidentReport> tblAccidentReports { get; set; }

    public virtual DbSet<tblAccidentReportDocument> tblAccidentReportDocuments { get; set; }

    public virtual DbSet<tblAddress> tblAddresses { get; set; }

    public virtual DbSet<tblAddressType> tblAddressTypes { get; set; }

    public virtual DbSet<tblAssessorialPrice> tblAssessorialPrices { get; set; }

    public virtual DbSet<tblBaseAddress> tblBaseAddresses { get; set; }

    public virtual DbSet<tblBaseFreightDetail> tblBaseFreightDetails { get; set; }

    public virtual DbSet<tblCity> tblCities { get; set; }

    public virtual DbSet<tblCommodity> tblCommodities { get; set; }

    public virtual DbSet<tblCountry> tblCountries { get; set; }

    public virtual DbSet<tblCustomerBaseFreightDetail> tblCustomerBaseFreightDetails { get; set; }

    public virtual DbSet<tblCustomerContact> tblCustomerContacts { get; set; }

    public virtual DbSet<tblCustomerRegistration> tblCustomerRegistrations { get; set; }

    public virtual DbSet<tblDamagedImage> tblDamagedImages { get; set; }

    public virtual DbSet<tblDelivery> tblDeliveries { get; set; }

    public virtual DbSet<tblDocumentType> tblDocumentTypes { get; set; }

    public virtual DbSet<tblDoorType> tblDoorTypes { get; set; }

    public virtual DbSet<tblDriver> tblDrivers { get; set; }

    public virtual DbSet<tblDriverDocument> tblDriverDocuments { get; set; }

    public virtual DbSet<tblDriverGpsTrakingHistory> tblDriverGpsTrakingHistories { get; set; }

    public virtual DbSet<tblEquipmentDetail> tblEquipmentDetails { get; set; }

    public virtual DbSet<tblEquipmentDocument> tblEquipmentDocuments { get; set; }

    public virtual DbSet<tblEquipmentDoorType> tblEquipmentDoorTypes { get; set; }

    public virtual DbSet<tblEquipmentFreight> tblEquipmentFreights { get; set; }

    public virtual DbSet<tblEquipmentStatu> tblEquipmentStatus { get; set; }

    public virtual DbSet<tblEquipmentType> tblEquipmentTypes { get; set; }

    public virtual DbSet<tblFeedback> tblFeedbacks { get; set; }

    public virtual DbSet<tblFreightType> tblFreightTypes { get; set; }

    public virtual DbSet<tblFumigation> tblFumigations { get; set; }

    public virtual DbSet<tblFumigationAccessorialPrice> tblFumigationAccessorialPrices { get; set; }

    public virtual DbSet<tblFumigationComment> tblFumigationComments { get; set; }

    public virtual DbSet<tblFumigationDamagedImage> tblFumigationDamagedImages { get; set; }

    public virtual DbSet<tblFumigationEquipmentNDriver> tblFumigationEquipmentNDrivers { get; set; }

    public virtual DbSet<tblFumigationEventHistory> tblFumigationEventHistories { get; set; }

    public virtual DbSet<tblFumigationPreTripCheckUp> tblFumigationPreTripCheckUps { get; set; }

    public virtual DbSet<tblFumigationProofOfTemperatureImage> tblFumigationProofOfTemperatureImages { get; set; }

    public virtual DbSet<tblFumigationRout> tblFumigationRouts { get; set; }

    public virtual DbSet<tblFumigationStatusHistory> tblFumigationStatusHistories { get; set; }

    public virtual DbSet<tblFumigationType> tblFumigationTypes { get; set; }

    public virtual DbSet<tblFumigationWaitingNotification> tblFumigationWaitingNotifications { get; set; }

    public virtual DbSet<tblLanguage> tblLanguages { get; set; }

    public virtual DbSet<tblLeave> tblLeaves { get; set; }

    public virtual DbSet<tblLeaveStatu> tblLeaveStatus { get; set; }

    public virtual DbSet<tblLog> tblLogs { get; set; }

    public virtual DbSet<tblMailHistory> tblMailHistories { get; set; }

    public virtual DbSet<tblPackage> tblPackages { get; set; }

    public virtual DbSet<tblPackageType> tblPackageTypes { get; set; }

    public virtual DbSet<tblPageAction> tblPageActions { get; set; }

    public virtual DbSet<tblPageAuthorization> tblPageAuthorizations { get; set; }

    public virtual DbSet<tblPage> tblPages { get; set; }

    public virtual DbSet<tblPreTripCheckUp> tblPreTripCheckUps { get; set; }

    public virtual DbSet<tblPricingMethod> tblPricingMethods { get; set; }

    public virtual DbSet<tblProofOfTemperatureImage> tblProofOfTemperatureImages { get; set; }

    public virtual DbSet<tblQuoteAccessorialPrice> tblQuoteAccessorialPrices { get; set; }

    public virtual DbSet<tblQuoteRouteStop> tblQuoteRouteStops { get; set; }

    public virtual DbSet<tblQuote> tblQuotes { get; set; }

    public virtual DbSet<tblRelationship> tblRelationships { get; set; }

    public virtual DbSet<tblRole> tblRoles { get; set; }

    public virtual DbSet<tblShipment> tblShipments { get; set; }

    public virtual DbSet<tblShipmentAccessorialPrice> tblShipmentAccessorialPrices { get; set; }

    public virtual DbSet<tblShipmentCommment> tblShipmentCommments { get; set; }

    public virtual DbSet<tblShipmentEquipmentNdriver> tblShipmentEquipmentNdrivers { get; set; }

    public virtual DbSet<tblShipmentEventHistory> tblShipmentEventHistories { get; set; }

    public virtual DbSet<tblShipmentFreightDetail> tblShipmentFreightDetails { get; set; }

    public virtual DbSet<tblShipmentRefNo> tblShipmentRefNoes { get; set; }

    public virtual DbSet<tblShipmentRoutesStop> tblShipmentRoutesStops { get; set; }

    public virtual DbSet<tblShipmentStatu> tblShipmentStatus { get; set; }

    public virtual DbSet<tblShipmentStatusHistory> tblShipmentStatusHistories { get; set; }

    public virtual DbSet<tblShipmentSubStatu> tblShipmentSubStatus { get; set; }

    public virtual DbSet<tblShipmentTrackingHistory> tblShipmentTrackingHistories { get; set; }

    public virtual DbSet<tblState> tblStates { get; set; }

    public virtual DbSet<tblTemperature> tblTemperatures { get; set; }

    public virtual DbSet<tblTermAndCondition> tblTermAndConditions { get; set; }

    public virtual DbSet<tblTimeCard> tblTimeCards { get; set; }

    public virtual DbSet<tblTimeCardCalculation> tblTimeCardCalculations { get; set; }

    public virtual DbSet<tblTimeCardLoan> tblTimeCardLoans { get; set; }

    public virtual DbSet<tblTimeCardlog> tblTimeCardlogs { get; set; }

    public virtual DbSet<tblTrailerRental> tblTrailerRentals { get; set; }

    public virtual DbSet<tblTrailerRentalDetail> tblTrailerRentalDetails { get; set; }

    public virtual DbSet<tblTransportVehical> tblTransportVehicals { get; set; }

    public virtual DbSet<tblUploadShipmentSample> tblUploadShipmentSamples { get; set; }

    public virtual DbSet<tblUser> tblUsers { get; set; }

    public virtual DbSet<tblUserRole> tblUserRoles { get; set; }

    public virtual DbSet<tblVendorNconsignee> tblVendorNconsignees { get; set; }

    public virtual DbSet<tblWatingNotification> tblWatingNotifications { get; set; }

    public virtual DbSet<tblBaseAddressBackup> tblBaseAddressBackups { get; set; }

    public virtual DbSet<tblBaseAddresstest> tblBaseAddresstests { get; set; }

    public virtual DbSet<tblCustomerRegistrationBackup> tblCustomerRegistrationBackups { get; set; }

    public virtual DbSet<tblShipmentStatus1> tblShipmentStatus1 { get; set; }

    public virtual DbSet<view_AllShipmentQuantity> view_AllShipmentQuantity { get; set; }

    public virtual DbSet<view_DriverDashboard> view_DriverDashboard { get; set; }

    public virtual DbSet<View_DriverShipmentDetail> View_DriverShipmentDetail { get; set; }

    public virtual DbSet<view_FreightTypeId> view_FreightTypeId { get; set; }

    public virtual DbSet<view_GetAllShipment> view_GetAllShipment { get; set; }

    public virtual DbSet<view_GetAllShipment__test1> view_GetAllShipment__test1 { get; set; }

    public virtual DbSet<view_GetAllShipment_Update_18Dec> view_GetAllShipment_Update_18Dec { get; set; }

    public virtual DbSet<view_GetAllShipment_Updated_18Dec> view_GetAllShipment_Updated_18Dec { get; set; }

    public virtual DbSet<view_GetOrderNotTakenShipment> view_GetOrderNotTakenShipment { get; set; }

    public virtual DbSet<view_GetOrderNotTakenShipment_Text> view_GetOrderNotTakenShipment_Text { get; set; }

    public virtual DbSet<View_GetOrderNotTakenShipment_Updated_18Dec> View_GetOrderNotTakenShipment_Updated_18Dec { get; set; }

    public virtual DbSet<View_GetOrderNotTakenShipment_Updated_22Dec> View_GetOrderNotTakenShipment_Updated_22Dec { get; set; }

    public virtual DbSet<view_GetOrderTakenFumigation> view_GetOrderTakenFumigation { get; set; }

    public virtual DbSet<view_GetOrderTakenShipment> view_GetOrderTakenShipment { get; set; }

    public virtual DbSet<view_GetOrderTakenShipment_Text> view_GetOrderTakenShipment_Text { get; set; }

    public virtual DbSet<View_GetOrderTakenShipment_Updated_18Dec> View_GetOrderTakenShipment_Updated_18Dec { get; set; }

    public virtual DbSet<view_GetOtherFumigation> view_GetOtherFumigation { get; set; }

    public virtual DbSet<view_ShipmentQuantity> view_ShipmentQuantity { get; set; }

    public virtual DbSet<view_tblShipmentFreightDetail> view_tblShipmentFreightDetail { get; set; }


    [DbFunction("LarastruckingDBEntities", "fun_GetShipmentQuantity")]
    public virtual IQueryable<fun_GetShipmentQuantity_Result> fun_GetShipmentQuantity(Nullable<int> shipmentId)
    {

        var shipmentIdParameter = shipmentId.HasValue ?
            new ObjectParameter("ShipmentId", shipmentId) :
            new ObjectParameter("ShipmentId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fun_GetShipmentQuantity_Result>("[LarastruckingDBEntities].[fun_GetShipmentQuantity](@ShipmentId)", shipmentIdParameter);
    }


    [DbFunction("LarastruckingDBEntities", "GetDriverDeliveryLocation")]
    public virtual IQueryable<GetDriverDeliveryLocation_Result> GetDriverDeliveryLocation(Nullable<int> fumigationId, Nullable<int> driverId)
    {

        var fumigationIdParameter = fumigationId.HasValue ?
            new ObjectParameter("FumigationId", fumigationId) :
            new ObjectParameter("FumigationId", typeof(int));


        var driverIdParameter = driverId.HasValue ?
            new ObjectParameter("DriverId", driverId) :
            new ObjectParameter("DriverId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDriverDeliveryLocation_Result>("[LarastruckingDBEntities].[GetDriverDeliveryLocation](@FumigationId, @DriverId)", fumigationIdParameter, driverIdParameter);
    }


    [DbFunction("LarastruckingDBEntities", "GetDriverFumigationLocation")]
    public virtual IQueryable<GetDriverFumigationLocation_Result> GetDriverFumigationLocation(Nullable<int> fumigationId)
    {

        var fumigationIdParameter = fumigationId.HasValue ?
            new ObjectParameter("FumigationId", fumigationId) :
            new ObjectParameter("FumigationId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDriverFumigationLocation_Result>("[LarastruckingDBEntities].[GetDriverFumigationLocation](@FumigationId)", fumigationIdParameter);
    }


    [DbFunction("LarastruckingDBEntities", "GetDriverFumigationPickupLocation")]
    public virtual IQueryable<GetDriverFumigationPickupLocation_Result> GetDriverFumigationPickupLocation(Nullable<int> fumigationId, Nullable<int> driverId)
    {

        var fumigationIdParameter = fumigationId.HasValue ?
            new ObjectParameter("FumigationId", fumigationId) :
            new ObjectParameter("FumigationId", typeof(int));


        var driverIdParameter = driverId.HasValue ?
            new ObjectParameter("DriverId", driverId) :
            new ObjectParameter("DriverId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDriverFumigationPickupLocation_Result>("[LarastruckingDBEntities].[GetDriverFumigationPickupLocation](@FumigationId, @DriverId)", fumigationIdParameter, driverIdParameter);
    }


    [DbFunction("LarastruckingDBEntities", "GetFumigationDeliveryLocation")]
    public virtual IQueryable<GetFumigationDeliveryLocation_Result> GetFumigationDeliveryLocation(Nullable<int> fumigationRoutsId)
    {

        var fumigationRoutsIdParameter = fumigationRoutsId.HasValue ?
            new ObjectParameter("FumigationRoutsId", fumigationRoutsId) :
            new ObjectParameter("FumigationRoutsId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetFumigationDeliveryLocation_Result>("[LarastruckingDBEntities].[GetFumigationDeliveryLocation](@FumigationRoutsId)", fumigationRoutsIdParameter);
    }


    [DbFunction("LarastruckingDBEntities", "GetFumigationLocation")]
    public virtual IQueryable<GetFumigationLocation_Result> GetFumigationLocation(Nullable<int> fumigationId)
    {

        var fumigationIdParameter = fumigationId.HasValue ?
            new ObjectParameter("FumigationId", fumigationId) :
            new ObjectParameter("FumigationId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetFumigationLocation_Result>("[LarastruckingDBEntities].[GetFumigationLocation](@FumigationId)", fumigationIdParameter);
    }


    [DbFunction("LarastruckingDBEntities", "GetFumigationPickUpLocation")]
    public virtual IQueryable<GetFumigationPickUpLocation_Result> GetFumigationPickUpLocation(Nullable<int> fumigationRoutsId)
    {

        var fumigationRoutsIdParameter = fumigationRoutsId.HasValue ?
            new ObjectParameter("FumigationRoutsId", fumigationRoutsId) :
            new ObjectParameter("FumigationRoutsId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetFumigationPickUpLocation_Result>("[LarastruckingDBEntities].[GetFumigationPickUpLocation](@FumigationRoutsId)", fumigationRoutsIdParameter);
    }


    [DbFunction("LarastruckingDBEntities", "GetShipmentDeliveryLocation")]
    public virtual IQueryable<GetShipmentDeliveryLocation_Result> GetShipmentDeliveryLocation(Nullable<int> shippingId)
    {

        var shippingIdParameter = shippingId.HasValue ?
            new ObjectParameter("ShippingId", shippingId) :
            new ObjectParameter("ShippingId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetShipmentDeliveryLocation_Result>("[LarastruckingDBEntities].[GetShipmentDeliveryLocation](@ShippingId)", shippingIdParameter);
    }


    [DbFunction("LarastruckingDBEntities", "GetShipmentPickupLocation")]
    public virtual IQueryable<GetShipmentPickupLocation_Result> GetShipmentPickupLocation(Nullable<int> shippingId)
    {

        var shippingIdParameter = shippingId.HasValue ?
            new ObjectParameter("ShippingId", shippingId) :
            new ObjectParameter("ShippingId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetShipmentPickupLocation_Result>("[LarastruckingDBEntities].[GetShipmentPickupLocation](@ShippingId)", shippingIdParameter);
    }


    [DbFunction("LarastruckingDBEntities", "GetTrailerRentalDetial")]
    public virtual IQueryable<GetTrailerRentalDetial_Result> GetTrailerRentalDetial(Nullable<int> trailerRentalId)
    {

        var trailerRentalIdParameter = trailerRentalId.HasValue ?
            new ObjectParameter("TrailerRentalId", trailerRentalId) :
            new ObjectParameter("TrailerRentalId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTrailerRentalDetial_Result>("[LarastruckingDBEntities].[GetTrailerRentalDetial](@TrailerRentalId)", trailerRentalIdParameter);
    }


    [DbFunction("LarastruckingDBEntities", "shipmentStatus")]
    public virtual IQueryable<shipmentStatus_Result> shipmentStatus(Nullable<int> shipmetnID)
    {

        var shipmetnIDParameter = shipmetnID.HasValue ?
            new ObjectParameter("shipmetnID", shipmetnID) :
            new ObjectParameter("shipmetnID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<shipmentStatus_Result>("[LarastruckingDBEntities].[shipmentStatus](@shipmetnID)", shipmetnIDParameter);
    }


    public virtual ObjectResult<usp_AuthenticateUser_Result> usp_AuthenticateUser(string userName, string password)
    {

        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuthenticateUser_Result>("usp_AuthenticateUser", userNameParameter, passwordParameter);
    }


    public virtual int usp_CreateFumigation(Nullable<int> sPType, Nullable<long> customerId, Nullable<int> statusId, Nullable<int> subStatusId, string reason, string requestedBy, string shipmentRefNo, string comments, Nullable<int> createdBy, string fumigationComment)
    {

        var sPTypeParameter = sPType.HasValue ?
            new ObjectParameter("SPType", sPType) :
            new ObjectParameter("SPType", typeof(int));


        var customerIdParameter = customerId.HasValue ?
            new ObjectParameter("CustomerId", customerId) :
            new ObjectParameter("CustomerId", typeof(long));


        var statusIdParameter = statusId.HasValue ?
            new ObjectParameter("StatusId", statusId) :
            new ObjectParameter("StatusId", typeof(int));


        var subStatusIdParameter = subStatusId.HasValue ?
            new ObjectParameter("SubStatusId", subStatusId) :
            new ObjectParameter("SubStatusId", typeof(int));


        var reasonParameter = reason != null ?
            new ObjectParameter("Reason", reason) :
            new ObjectParameter("Reason", typeof(string));


        var requestedByParameter = requestedBy != null ?
            new ObjectParameter("RequestedBy", requestedBy) :
            new ObjectParameter("RequestedBy", typeof(string));


        var shipmentRefNoParameter = shipmentRefNo != null ?
            new ObjectParameter("ShipmentRefNo", shipmentRefNo) :
            new ObjectParameter("ShipmentRefNo", typeof(string));


        var commentsParameter = comments != null ?
            new ObjectParameter("Comments", comments) :
            new ObjectParameter("Comments", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var fumigationCommentParameter = fumigationComment != null ?
            new ObjectParameter("FumigationComment", fumigationComment) :
            new ObjectParameter("FumigationComment", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateFumigation", sPTypeParameter, customerIdParameter, statusIdParameter, subStatusIdParameter, reasonParameter, requestedByParameter, shipmentRefNoParameter, commentsParameter, createdByParameter, fumigationCommentParameter);
    }


    public virtual int usp_CreateQuote(Nullable<int> sPType, Nullable<long> customerId, string customerName, string email, string phone, string quotesName, Nullable<System.DateTime> quoteDate, Nullable<System.DateTime> validUptoDate, Nullable<decimal> finalTotalAmount, Nullable<int> quoteStatusId, Nullable<int> createdBy)
    {

        var sPTypeParameter = sPType.HasValue ?
            new ObjectParameter("SPType", sPType) :
            new ObjectParameter("SPType", typeof(int));


        var customerIdParameter = customerId.HasValue ?
            new ObjectParameter("CustomerId", customerId) :
            new ObjectParameter("CustomerId", typeof(long));


        var customerNameParameter = customerName != null ?
            new ObjectParameter("CustomerName", customerName) :
            new ObjectParameter("CustomerName", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        var phoneParameter = phone != null ?
            new ObjectParameter("Phone", phone) :
            new ObjectParameter("Phone", typeof(string));


        var quotesNameParameter = quotesName != null ?
            new ObjectParameter("QuotesName", quotesName) :
            new ObjectParameter("QuotesName", typeof(string));


        var quoteDateParameter = quoteDate.HasValue ?
            new ObjectParameter("QuoteDate", quoteDate) :
            new ObjectParameter("QuoteDate", typeof(System.DateTime));


        var validUptoDateParameter = validUptoDate.HasValue ?
            new ObjectParameter("ValidUptoDate", validUptoDate) :
            new ObjectParameter("ValidUptoDate", typeof(System.DateTime));


        var finalTotalAmountParameter = finalTotalAmount.HasValue ?
            new ObjectParameter("FinalTotalAmount", finalTotalAmount) :
            new ObjectParameter("FinalTotalAmount", typeof(decimal));


        var quoteStatusIdParameter = quoteStatusId.HasValue ?
            new ObjectParameter("QuoteStatusId", quoteStatusId) :
            new ObjectParameter("QuoteStatusId", typeof(int));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateQuote", sPTypeParameter, customerIdParameter, customerNameParameter, emailParameter, phoneParameter, quotesNameParameter, quoteDateParameter, validUptoDateParameter, finalTotalAmountParameter, quoteStatusIdParameter, createdByParameter);
    }


    public virtual int usp_CreateShipment(Nullable<int> sPType, Nullable<long> customerId, Nullable<int> statusId, Nullable<int> subStatusId, string requestedBy, string reason, string shipmentRefNo, string airWayBill, string customerPO, string orderNo, string customerRef, string containerNo, string purchaseDoc, string finalTotalAmount, string driverInstruction, string vendorNconsignee, Nullable<int> createdBy)
    {

        var sPTypeParameter = sPType.HasValue ?
            new ObjectParameter("SPType", sPType) :
            new ObjectParameter("SPType", typeof(int));


        var customerIdParameter = customerId.HasValue ?
            new ObjectParameter("CustomerId", customerId) :
            new ObjectParameter("CustomerId", typeof(long));


        var statusIdParameter = statusId.HasValue ?
            new ObjectParameter("StatusId", statusId) :
            new ObjectParameter("StatusId", typeof(int));


        var subStatusIdParameter = subStatusId.HasValue ?
            new ObjectParameter("SubStatusId", subStatusId) :
            new ObjectParameter("SubStatusId", typeof(int));


        var requestedByParameter = requestedBy != null ?
            new ObjectParameter("RequestedBy", requestedBy) :
            new ObjectParameter("RequestedBy", typeof(string));


        var reasonParameter = reason != null ?
            new ObjectParameter("Reason", reason) :
            new ObjectParameter("Reason", typeof(string));


        var shipmentRefNoParameter = shipmentRefNo != null ?
            new ObjectParameter("ShipmentRefNo", shipmentRefNo) :
            new ObjectParameter("ShipmentRefNo", typeof(string));


        var airWayBillParameter = airWayBill != null ?
            new ObjectParameter("AirWayBill", airWayBill) :
            new ObjectParameter("AirWayBill", typeof(string));


        var customerPOParameter = customerPO != null ?
            new ObjectParameter("CustomerPO", customerPO) :
            new ObjectParameter("CustomerPO", typeof(string));


        var orderNoParameter = orderNo != null ?
            new ObjectParameter("OrderNo", orderNo) :
            new ObjectParameter("OrderNo", typeof(string));


        var customerRefParameter = customerRef != null ?
            new ObjectParameter("CustomerRef", customerRef) :
            new ObjectParameter("CustomerRef", typeof(string));


        var containerNoParameter = containerNo != null ?
            new ObjectParameter("ContainerNo", containerNo) :
            new ObjectParameter("ContainerNo", typeof(string));


        var purchaseDocParameter = purchaseDoc != null ?
            new ObjectParameter("PurchaseDoc", purchaseDoc) :
            new ObjectParameter("PurchaseDoc", typeof(string));


        var finalTotalAmountParameter = finalTotalAmount != null ?
            new ObjectParameter("FinalTotalAmount", finalTotalAmount) :
            new ObjectParameter("FinalTotalAmount", typeof(string));


        var driverInstructionParameter = driverInstruction != null ?
            new ObjectParameter("DriverInstruction", driverInstruction) :
            new ObjectParameter("DriverInstruction", typeof(string));


        var vendorNconsigneeParameter = vendorNconsignee != null ?
            new ObjectParameter("VendorNconsignee", vendorNconsignee) :
            new ObjectParameter("VendorNconsignee", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateShipment", sPTypeParameter, customerIdParameter, statusIdParameter, subStatusIdParameter, requestedByParameter, reasonParameter, shipmentRefNoParameter, airWayBillParameter, customerPOParameter, orderNoParameter, customerRefParameter, containerNoParameter, purchaseDocParameter, finalTotalAmountParameter, driverInstructionParameter, vendorNconsigneeParameter, createdByParameter);
    }


    public virtual int usp_CreateUserRegistrationAndRole(Nullable<int> roleID, string userName, string firstName, string lastName, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<bool> isActive, string gUID, Nullable<System.DateTime> resetPasswordDateTime, Nullable<System.DateTime> guidGenratedDateTime, string userType)
    {

        var roleIDParameter = roleID.HasValue ?
            new ObjectParameter("RoleID", roleID) :
            new ObjectParameter("RoleID", typeof(int));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));


        var lastNameParameter = lastName != null ?
            new ObjectParameter("LastName", lastName) :
            new ObjectParameter("LastName", typeof(string));


        var createdOnParameter = createdOn.HasValue ?
            new ObjectParameter("CreatedOn", createdOn) :
            new ObjectParameter("CreatedOn", typeof(System.DateTime));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        var gUIDParameter = gUID != null ?
            new ObjectParameter("GUID", gUID) :
            new ObjectParameter("GUID", typeof(string));


        var resetPasswordDateTimeParameter = resetPasswordDateTime.HasValue ?
            new ObjectParameter("ResetPasswordDateTime", resetPasswordDateTime) :
            new ObjectParameter("ResetPasswordDateTime", typeof(System.DateTime));


        var guidGenratedDateTimeParameter = guidGenratedDateTime.HasValue ?
            new ObjectParameter("GuidGenratedDateTime", guidGenratedDateTime) :
            new ObjectParameter("GuidGenratedDateTime", typeof(System.DateTime));


        var userTypeParameter = userType != null ?
            new ObjectParameter("UserType", userType) :
            new ObjectParameter("UserType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateUserRegistrationAndRole", roleIDParameter, userNameParameter, firstNameParameter, lastNameParameter, createdOnParameter, createdByParameter, isActiveParameter, gUIDParameter, resetPasswordDateTimeParameter, guidGenratedDateTimeParameter, userTypeParameter);
    }


    public virtual int usp_CustomerDashoard(Nullable<int> userId, string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalCount)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CustomerDashoard", userIdParameter, searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter, totalCount);
    }


    public virtual ObjectResult<usp_CustomerFumigationTrackDetails_Result> usp_CustomerFumigationTrackDetails(Nullable<int> fumigationId, Nullable<int> fumigationRouteId)
    {

        var fumigationIdParameter = fumigationId.HasValue ?
            new ObjectParameter("FumigationId", fumigationId) :
            new ObjectParameter("FumigationId", typeof(int));


        var fumigationRouteIdParameter = fumigationRouteId.HasValue ?
            new ObjectParameter("FumigationRouteId", fumigationRouteId) :
            new ObjectParameter("FumigationRouteId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerFumigationTrackDetails_Result>("usp_CustomerFumigationTrackDetails", fumigationIdParameter, fumigationRouteIdParameter);
    }


    public virtual ObjectResult<usp_CustomerModule_Result> usp_CustomerModule(Nullable<int> spType, Nullable<int> userId, Nullable<int> shipmentId, Nullable<int> shippingRoutesId, Nullable<int> shipmentFreightDetailId, Nullable<int> customerId, Nullable<int> startRowIndex, Nullable<int> pageSize, string searchText)
    {

        var spTypeParameter = spType.HasValue ?
            new ObjectParameter("SpType", spType) :
            new ObjectParameter("SpType", typeof(int));


        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        var shipmentIdParameter = shipmentId.HasValue ?
            new ObjectParameter("ShipmentId", shipmentId) :
            new ObjectParameter("ShipmentId", typeof(int));


        var shippingRoutesIdParameter = shippingRoutesId.HasValue ?
            new ObjectParameter("ShippingRoutesId", shippingRoutesId) :
            new ObjectParameter("ShippingRoutesId", typeof(int));


        var shipmentFreightDetailIdParameter = shipmentFreightDetailId.HasValue ?
            new ObjectParameter("ShipmentFreightDetailId", shipmentFreightDetailId) :
            new ObjectParameter("ShipmentFreightDetailId", typeof(int));


        var customerIdParameter = customerId.HasValue ?
            new ObjectParameter("CustomerId", customerId) :
            new ObjectParameter("CustomerId", typeof(int));


        var startRowIndexParameter = startRowIndex.HasValue ?
            new ObjectParameter("StartRowIndex", startRowIndex) :
            new ObjectParameter("StartRowIndex", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var searchTextParameter = searchText != null ?
            new ObjectParameter("SearchText", searchText) :
            new ObjectParameter("SearchText", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerModule_Result>("usp_CustomerModule", spTypeParameter, userIdParameter, shipmentIdParameter, shippingRoutesIdParameter, shipmentFreightDetailIdParameter, customerIdParameter, startRowIndexParameter, pageSizeParameter, searchTextParameter);
    }


    public virtual int usp_CustomerOldShipmentDashoard(Nullable<int> userId, string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalCount)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CustomerOldShipmentDashoard", userIdParameter, searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter, totalCount);
    }


    public virtual ObjectResult<usp_CustomerStatusTrack_Result> usp_CustomerStatusTrack(Nullable<int> shipmentId)
    {

        var shipmentIdParameter = shipmentId.HasValue ?
            new ObjectParameter("ShipmentId", shipmentId) :
            new ObjectParameter("ShipmentId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerStatusTrack_Result>("usp_CustomerStatusTrack", shipmentIdParameter);
    }


    public virtual ObjectResult<usp_CustomerTrackDetails_Result> usp_CustomerTrackDetails(Nullable<int> shipmentId)
    {

        var shipmentIdParameter = shipmentId.HasValue ?
            new ObjectParameter("ShipmentId", shipmentId) :
            new ObjectParameter("ShipmentId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerTrackDetails_Result>("usp_CustomerTrackDetails", shipmentIdParameter);
    }


    public virtual int usp_DailyReportDashboard(Nullable<int> userId, Nullable<int> statusId, string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalCount)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        var statusIdParameter = statusId.HasValue ?
            new ObjectParameter("statusId", statusId) :
            new ObjectParameter("statusId", typeof(int));


        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DailyReportDashboard", userIdParameter, statusIdParameter, searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter, totalCount);
    }


    public virtual int usp_DailyReportDashboard_Test(Nullable<int> userId, Nullable<int> statusId, Nullable<int> customerId, string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalCount)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        var statusIdParameter = statusId.HasValue ?
            new ObjectParameter("StatusId", statusId) :
            new ObjectParameter("StatusId", typeof(int));


        var customerIdParameter = customerId.HasValue ?
            new ObjectParameter("CustomerId", customerId) :
            new ObjectParameter("CustomerId", typeof(int));


        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DailyReportDashboard_Test", userIdParameter, statusIdParameter, customerIdParameter, searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter, totalCount);
    }


    public virtual int usp_DriverDashboard(Nullable<int> userId, string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DriverDashboard", userIdParameter, searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter);
    }


    public virtual int usp_DriverDashboard_1732020(Nullable<int> userId, string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalCount)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DriverDashboard_1732020", userIdParameter, searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter, totalCount);
    }


    public virtual ObjectResult<usp_DriverDashboard_Test_Result> usp_DriverDashboard_Test(Nullable<int> userId, string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DriverDashboard_Test_Result>("usp_DriverDashboard_Test", userIdParameter, searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter);
    }


    public virtual ObjectResult<usp_DriverDashboard123_Result> usp_DriverDashboard123(Nullable<int> userId)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DriverDashboard123_Result>("usp_DriverDashboard123", userIdParameter);
    }


    public virtual ObjectResult<usp_DriverInformation_Result> usp_DriverInformation(Nullable<int> spType, Nullable<int> driverId)
    {

        var spTypeParameter = spType.HasValue ?
            new ObjectParameter("SpType", spType) :
            new ObjectParameter("SpType", typeof(int));


        var driverIdParameter = driverId.HasValue ?
            new ObjectParameter("DriverId", driverId) :
            new ObjectParameter("DriverId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DriverInformation_Result>("usp_DriverInformation", spTypeParameter, driverIdParameter);
    }


    public virtual ObjectResult<usp_DriverModulePreTrip_Result> usp_DriverModulePreTrip(Nullable<int> spType, Nullable<int> userId, Nullable<int> startRowIndex, Nullable<int> pageSize, Nullable<int> shipmentId, Nullable<int> shippingRoutesId, Nullable<int> shipmentFreightDetailId, string searchText)
    {

        var spTypeParameter = spType.HasValue ?
            new ObjectParameter("SpType", spType) :
            new ObjectParameter("SpType", typeof(int));


        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        var startRowIndexParameter = startRowIndex.HasValue ?
            new ObjectParameter("StartRowIndex", startRowIndex) :
            new ObjectParameter("StartRowIndex", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var shipmentIdParameter = shipmentId.HasValue ?
            new ObjectParameter("ShipmentId", shipmentId) :
            new ObjectParameter("ShipmentId", typeof(int));


        var shippingRoutesIdParameter = shippingRoutesId.HasValue ?
            new ObjectParameter("ShippingRoutesId", shippingRoutesId) :
            new ObjectParameter("ShippingRoutesId", typeof(int));


        var shipmentFreightDetailIdParameter = shipmentFreightDetailId.HasValue ?
            new ObjectParameter("ShipmentFreightDetailId", shipmentFreightDetailId) :
            new ObjectParameter("ShipmentFreightDetailId", typeof(int));


        var searchTextParameter = searchText != null ?
            new ObjectParameter("SearchText", searchText) :
            new ObjectParameter("SearchText", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DriverModulePreTrip_Result>("usp_DriverModulePreTrip", spTypeParameter, userIdParameter, startRowIndexParameter, pageSizeParameter, shipmentIdParameter, shippingRoutesIdParameter, shipmentFreightDetailIdParameter, searchTextParameter);
    }


    public virtual int usp_EditQuote(Nullable<int> sPType, Nullable<int> quoteId, Nullable<long> customerId, string customerName, string email, string phone, string quotesName, Nullable<System.DateTime> quoteDate, Nullable<System.DateTime> validUptoDate, Nullable<decimal> finalTotalAmount, Nullable<int> quoteStatusId, Nullable<int> createdBy)
    {

        var sPTypeParameter = sPType.HasValue ?
            new ObjectParameter("SPType", sPType) :
            new ObjectParameter("SPType", typeof(int));


        var quoteIdParameter = quoteId.HasValue ?
            new ObjectParameter("QuoteId", quoteId) :
            new ObjectParameter("QuoteId", typeof(int));


        var customerIdParameter = customerId.HasValue ?
            new ObjectParameter("CustomerId", customerId) :
            new ObjectParameter("CustomerId", typeof(long));


        var customerNameParameter = customerName != null ?
            new ObjectParameter("CustomerName", customerName) :
            new ObjectParameter("CustomerName", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        var phoneParameter = phone != null ?
            new ObjectParameter("Phone", phone) :
            new ObjectParameter("Phone", typeof(string));


        var quotesNameParameter = quotesName != null ?
            new ObjectParameter("QuotesName", quotesName) :
            new ObjectParameter("QuotesName", typeof(string));


        var quoteDateParameter = quoteDate.HasValue ?
            new ObjectParameter("QuoteDate", quoteDate) :
            new ObjectParameter("QuoteDate", typeof(System.DateTime));


        var validUptoDateParameter = validUptoDate.HasValue ?
            new ObjectParameter("ValidUptoDate", validUptoDate) :
            new ObjectParameter("ValidUptoDate", typeof(System.DateTime));


        var finalTotalAmountParameter = finalTotalAmount.HasValue ?
            new ObjectParameter("FinalTotalAmount", finalTotalAmount) :
            new ObjectParameter("FinalTotalAmount", typeof(decimal));


        var quoteStatusIdParameter = quoteStatusId.HasValue ?
            new ObjectParameter("QuoteStatusId", quoteStatusId) :
            new ObjectParameter("QuoteStatusId", typeof(int));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EditQuote", sPTypeParameter, quoteIdParameter, customerIdParameter, customerNameParameter, emailParameter, phoneParameter, quotesNameParameter, quoteDateParameter, validUptoDateParameter, finalTotalAmountParameter, quoteStatusIdParameter, createdByParameter);
    }


    public virtual ObjectResult<usp_FumigationCustomerModule_Result> usp_FumigationCustomerModule(Nullable<int> spType, Nullable<int> fumigationId, Nullable<int> fumigationRoutsId)
    {

        var spTypeParameter = spType.HasValue ?
            new ObjectParameter("SpType", spType) :
            new ObjectParameter("SpType", typeof(int));


        var fumigationIdParameter = fumigationId.HasValue ?
            new ObjectParameter("FumigationId", fumigationId) :
            new ObjectParameter("FumigationId", typeof(int));


        var fumigationRoutsIdParameter = fumigationRoutsId.HasValue ?
            new ObjectParameter("FumigationRoutsId", fumigationRoutsId) :
            new ObjectParameter("FumigationRoutsId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FumigationCustomerModule_Result>("usp_FumigationCustomerModule", spTypeParameter, fumigationIdParameter, fumigationRoutsIdParameter);
    }


    public virtual ObjectResult<usp_FumigationDetails_Result> usp_FumigationDetails(Nullable<int> spType, Nullable<int> fumigationId, Nullable<int> fumigationRoutsId, Nullable<long> userId)
    {

        var spTypeParameter = spType.HasValue ?
            new ObjectParameter("SpType", spType) :
            new ObjectParameter("SpType", typeof(int));


        var fumigationIdParameter = fumigationId.HasValue ?
            new ObjectParameter("FumigationId", fumigationId) :
            new ObjectParameter("FumigationId", typeof(int));


        var fumigationRoutsIdParameter = fumigationRoutsId.HasValue ?
            new ObjectParameter("FumigationRoutsId", fumigationRoutsId) :
            new ObjectParameter("FumigationRoutsId", typeof(int));


        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FumigationDetails_Result>("usp_FumigationDetails", spTypeParameter, fumigationIdParameter, fumigationRoutsIdParameter, userIdParameter);
    }


    public virtual ObjectResult<usp_getDriverDetails_Result> usp_getDriverDetails()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getDriverDetails_Result>("usp_getDriverDetails");
    }


    public virtual ObjectResult<usp_GetFreightType_Result> usp_GetFreightType(Nullable<long> customerId, Nullable<int> pickupLocationId, Nullable<int> deliveryLocationId, Nullable<System.DateTime> pickupArrivalDate)
    {

        var customerIdParameter = customerId.HasValue ?
            new ObjectParameter("CustomerId", customerId) :
            new ObjectParameter("CustomerId", typeof(long));


        var pickupLocationIdParameter = pickupLocationId.HasValue ?
            new ObjectParameter("PickupLocationId", pickupLocationId) :
            new ObjectParameter("PickupLocationId", typeof(int));


        var deliveryLocationIdParameter = deliveryLocationId.HasValue ?
            new ObjectParameter("DeliveryLocationId", deliveryLocationId) :
            new ObjectParameter("DeliveryLocationId", typeof(int));


        var pickupArrivalDateParameter = pickupArrivalDate.HasValue ?
            new ObjectParameter("PickupArrivalDate", pickupArrivalDate) :
            new ObjectParameter("PickupArrivalDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFreightType_Result>("usp_GetFreightType", customerIdParameter, pickupLocationIdParameter, deliveryLocationIdParameter, pickupArrivalDateParameter);
    }


    public virtual ObjectResult<usp_GetFumigationById_Result> usp_GetFumigationById(Nullable<int> fumigationId)
    {

        var fumigationIdParameter = fumigationId.HasValue ?
            new ObjectParameter("FumigationId", fumigationId) :
            new ObjectParameter("FumigationId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFumigationById_Result>("usp_GetFumigationById", fumigationIdParameter);
    }


    public virtual ObjectResult<usp_GetFumigationList_Result> usp_GetFumigationList(string searchTerm, string sortColumn, string sortedColumns, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize)
    {

        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortedColumnsParameter = sortedColumns != null ?
            new ObjectParameter("SortedColumns", sortedColumns) :
            new ObjectParameter("SortedColumns", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFumigationList_Result>("usp_GetFumigationList", searchTermParameter, sortColumnParameter, sortedColumnsParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter);
    }


    public virtual ObjectResult<usp_GetFumigationWaitingTimeDetails_Result> usp_GetFumigationWaitingTimeDetails()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFumigationWaitingTimeDetails_Result>("usp_GetFumigationWaitingTimeDetails");
    }


    public virtual ObjectResult<usp_GetPageAuthorizations_Result> usp_GetPageAuthorizations(Nullable<int> roleId)
    {

        var roleIdParameter = roleId.HasValue ?
            new ObjectParameter("RoleId", roleId) :
            new ObjectParameter("RoleId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPageAuthorizations_Result>("usp_GetPageAuthorizations", roleIdParameter);
    }


    public virtual ObjectResult<usp_GetPricingMethod_Result> usp_GetPricingMethod(Nullable<long> customerId, Nullable<int> pickupLocationId, Nullable<int> deliveryLocationId, Nullable<System.DateTime> pickupArrivalDate)
    {

        var customerIdParameter = customerId.HasValue ?
            new ObjectParameter("CustomerId", customerId) :
            new ObjectParameter("CustomerId", typeof(long));


        var pickupLocationIdParameter = pickupLocationId.HasValue ?
            new ObjectParameter("PickupLocationId", pickupLocationId) :
            new ObjectParameter("PickupLocationId", typeof(int));


        var deliveryLocationIdParameter = deliveryLocationId.HasValue ?
            new ObjectParameter("DeliveryLocationId", deliveryLocationId) :
            new ObjectParameter("DeliveryLocationId", typeof(int));


        var pickupArrivalDateParameter = pickupArrivalDate.HasValue ?
            new ObjectParameter("PickupArrivalDate", pickupArrivalDate) :
            new ObjectParameter("PickupArrivalDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPricingMethod_Result>("usp_GetPricingMethod", customerIdParameter, pickupLocationIdParameter, deliveryLocationIdParameter, pickupArrivalDateParameter);
    }


    public virtual ObjectResult<usp_GetShipment_NotOrderTaken_List_Result> usp_GetShipment_NotOrderTaken_List(string searchTerm, string sortColumn, string sortedColumns, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize)
    {

        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortedColumnsParameter = sortedColumns != null ?
            new ObjectParameter("SortedColumns", sortedColumns) :
            new ObjectParameter("SortedColumns", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetShipment_NotOrderTaken_List_Result>("usp_GetShipment_NotOrderTaken_List", searchTermParameter, sortColumnParameter, sortedColumnsParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter);
    }


    public virtual ObjectResult<usp_GetShipment_OrderTaken_List_Result> usp_GetShipment_OrderTaken_List(string searchTerm, string sortColumn, string sortedColumns, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize)
    {

        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortedColumnsParameter = sortedColumns != null ?
            new ObjectParameter("SortedColumns", sortedColumns) :
            new ObjectParameter("SortedColumns", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetShipment_OrderTaken_List_Result>("usp_GetShipment_OrderTaken_List", searchTermParameter, sortColumnParameter, sortedColumnsParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter);
    }


    public virtual ObjectResult<usp_GetShipmentList_Result> usp_GetShipmentList(string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> customerId, Nullable<int> statusId, Nullable<int> freightTypeId)
    {

        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var startDateParameter = startDate.HasValue ?
            new ObjectParameter("StartDate", startDate) :
            new ObjectParameter("StartDate", typeof(System.DateTime));


        var endDateParameter = endDate.HasValue ?
            new ObjectParameter("EndDate", endDate) :
            new ObjectParameter("EndDate", typeof(System.DateTime));


        var customerIdParameter = customerId.HasValue ?
            new ObjectParameter("CustomerId", customerId) :
            new ObjectParameter("CustomerId", typeof(int));


        var statusIdParameter = statusId.HasValue ?
            new ObjectParameter("StatusId", statusId) :
            new ObjectParameter("StatusId", typeof(int));


        var freightTypeIdParameter = freightTypeId.HasValue ?
            new ObjectParameter("FreightTypeId", freightTypeId) :
            new ObjectParameter("FreightTypeId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetShipmentList_Result>("usp_GetShipmentList", searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter, startDateParameter, endDateParameter, customerIdParameter, statusIdParameter, freightTypeIdParameter);
    }


    public virtual ObjectResult<usp_GetShipmentList_New_Result> usp_GetShipmentList_New(string searchTerm, string sortColumn, string sortedColumns, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> customerId, Nullable<int> statusId, Nullable<int> freightTypeId, string driverName)
    {

        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortedColumnsParameter = sortedColumns != null ?
            new ObjectParameter("SortedColumns", sortedColumns) :
            new ObjectParameter("SortedColumns", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var startDateParameter = startDate.HasValue ?
            new ObjectParameter("StartDate", startDate) :
            new ObjectParameter("StartDate", typeof(System.DateTime));


        var endDateParameter = endDate.HasValue ?
            new ObjectParameter("EndDate", endDate) :
            new ObjectParameter("EndDate", typeof(System.DateTime));


        var customerIdParameter = customerId.HasValue ?
            new ObjectParameter("CustomerId", customerId) :
            new ObjectParameter("CustomerId", typeof(int));


        var statusIdParameter = statusId.HasValue ?
            new ObjectParameter("StatusId", statusId) :
            new ObjectParameter("StatusId", typeof(int));


        var freightTypeIdParameter = freightTypeId.HasValue ?
            new ObjectParameter("FreightTypeId", freightTypeId) :
            new ObjectParameter("FreightTypeId", typeof(int));


        var driverNameParameter = driverName != null ?
            new ObjectParameter("DriverName", driverName) :
            new ObjectParameter("DriverName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetShipmentList_New_Result>("usp_GetShipmentList_New", searchTermParameter, sortColumnParameter, sortedColumnsParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter, startDateParameter, endDateParameter, customerIdParameter, statusIdParameter, freightTypeIdParameter, driverNameParameter);
    }


    public virtual ObjectResult<usp_GetShipmentList_Test_Result> usp_GetShipmentList_Test(string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> customerId, Nullable<int> statusId, Nullable<int> freightTypeId)
    {

        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var startDateParameter = startDate.HasValue ?
            new ObjectParameter("StartDate", startDate) :
            new ObjectParameter("StartDate", typeof(System.DateTime));


        var endDateParameter = endDate.HasValue ?
            new ObjectParameter("EndDate", endDate) :
            new ObjectParameter("EndDate", typeof(System.DateTime));


        var customerIdParameter = customerId.HasValue ?
            new ObjectParameter("CustomerId", customerId) :
            new ObjectParameter("CustomerId", typeof(int));


        var statusIdParameter = statusId.HasValue ?
            new ObjectParameter("StatusId", statusId) :
            new ObjectParameter("StatusId", typeof(int));


        var freightTypeIdParameter = freightTypeId.HasValue ?
            new ObjectParameter("FreightTypeId", freightTypeId) :
            new ObjectParameter("FreightTypeId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetShipmentList_Test_Result>("usp_GetShipmentList_Test", searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter, startDateParameter, endDateParameter, customerIdParameter, statusIdParameter, freightTypeIdParameter);
    }


    public virtual int usp_GetTrailerRentalList(string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalCount)
    {

        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetTrailerRentalList", searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter, totalCount);
    }


    public virtual ObjectResult<usp_GetWaitingTimeDetails_Result> usp_GetWaitingTimeDetails()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetWaitingTimeDetails_Result>("usp_GetWaitingTimeDetails");
    }


    public virtual int usp_InsertUpdatePageAuthorization(Nullable<int> roleID, Nullable<int> pageID, Nullable<int> canView, Nullable<int> canInsert, Nullable<int> canUpdate, Nullable<int> canDelete, Nullable<int> isPricingMethod)
    {

        var roleIDParameter = roleID.HasValue ?
            new ObjectParameter("RoleID", roleID) :
            new ObjectParameter("RoleID", typeof(int));


        var pageIDParameter = pageID.HasValue ?
            new ObjectParameter("PageID", pageID) :
            new ObjectParameter("PageID", typeof(int));


        var canViewParameter = canView.HasValue ?
            new ObjectParameter("CanView", canView) :
            new ObjectParameter("CanView", typeof(int));


        var canInsertParameter = canInsert.HasValue ?
            new ObjectParameter("CanInsert", canInsert) :
            new ObjectParameter("CanInsert", typeof(int));


        var canUpdateParameter = canUpdate.HasValue ?
            new ObjectParameter("CanUpdate", canUpdate) :
            new ObjectParameter("CanUpdate", typeof(int));


        var canDeleteParameter = canDelete.HasValue ?
            new ObjectParameter("CanDelete", canDelete) :
            new ObjectParameter("CanDelete", typeof(int));


        var isPricingMethodParameter = isPricingMethod.HasValue ?
            new ObjectParameter("IsPricingMethod", isPricingMethod) :
            new ObjectParameter("IsPricingMethod", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertUpdatePageAuthorization", roleIDParameter, pageIDParameter, canViewParameter, canInsertParameter, canUpdateParameter, canDeleteParameter, isPricingMethodParameter);
    }


    public virtual ObjectResult<usp_LeaveManage_Result> usp_LeaveManage(Nullable<int> spType, Nullable<int> driverId, Nullable<int> userId, Nullable<int> leaveId)
    {

        var spTypeParameter = spType.HasValue ?
            new ObjectParameter("SpType", spType) :
            new ObjectParameter("SpType", typeof(int));


        var driverIdParameter = driverId.HasValue ?
            new ObjectParameter("DriverId", driverId) :
            new ObjectParameter("DriverId", typeof(int));


        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        var leaveIdParameter = leaveId.HasValue ?
            new ObjectParameter("LeaveId", leaveId) :
            new ObjectParameter("LeaveId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LeaveManage_Result>("usp_LeaveManage", spTypeParameter, driverIdParameter, userIdParameter, leaveIdParameter);
    }


    public virtual ObjectResult<usp_LoginUser_Result> usp_LoginUser(string userName, string password)
    {

        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LoginUser_Result>("usp_LoginUser", userNameParameter, passwordParameter);
    }


    public virtual ObjectResult<usp_ManageCustomer_Result> usp_ManageCustomer(Nullable<int> sPType, Nullable<int> page, Nullable<int> size)
    {

        var sPTypeParameter = sPType.HasValue ?
            new ObjectParameter("SPType", sPType) :
            new ObjectParameter("SPType", typeof(int));


        var pageParameter = page.HasValue ?
            new ObjectParameter("Page", page) :
            new ObjectParameter("Page", typeof(int));


        var sizeParameter = size.HasValue ?
            new ObjectParameter("Size", size) :
            new ObjectParameter("Size", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ManageCustomer_Result>("usp_ManageCustomer", sPTypeParameter, pageParameter, sizeParameter);
    }


    public virtual ObjectResult<usp_User_Result> usp_User(Nullable<int> userId)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("userId", userId) :
            new ObjectParameter("userId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_User_Result>("usp_User", userIdParameter);
    }


    public virtual ObjectResult<usp_UserDto_Result> usp_UserDto()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserDto_Result>("usp_UserDto");
    }


    public virtual ObjectResult<string> usp_UserRegistration(string userName, string password, string firstName, string lastName, Nullable<int> createdBy, Nullable<int> roleID, Nullable<bool> isActive, Nullable<bool> isDeleted, string gUID, Nullable<System.DateTime> resetPasswordDateTime, Nullable<System.DateTime> guidGenratedDateTime, string userType)
    {

        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));


        var lastNameParameter = lastName != null ?
            new ObjectParameter("LastName", lastName) :
            new ObjectParameter("LastName", typeof(string));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var roleIDParameter = roleID.HasValue ?
            new ObjectParameter("RoleID", roleID) :
            new ObjectParameter("RoleID", typeof(int));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        var gUIDParameter = gUID != null ?
            new ObjectParameter("GUID", gUID) :
            new ObjectParameter("GUID", typeof(string));


        var resetPasswordDateTimeParameter = resetPasswordDateTime.HasValue ?
            new ObjectParameter("ResetPasswordDateTime", resetPasswordDateTime) :
            new ObjectParameter("ResetPasswordDateTime", typeof(System.DateTime));


        var guidGenratedDateTimeParameter = guidGenratedDateTime.HasValue ?
            new ObjectParameter("GuidGenratedDateTime", guidGenratedDateTime) :
            new ObjectParameter("GuidGenratedDateTime", typeof(System.DateTime));


        var userTypeParameter = userType != null ?
            new ObjectParameter("UserType", userType) :
            new ObjectParameter("UserType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_UserRegistration", userNameParameter, passwordParameter, firstNameParameter, lastNameParameter, createdByParameter, roleIDParameter, isActiveParameter, isDeletedParameter, gUIDParameter, resetPasswordDateTimeParameter, guidGenratedDateTimeParameter, userTypeParameter);
    }


    public virtual ObjectResult<usp_GetShipment_NotOrderTaken_List_Updated_18Dec_Result> usp_GetShipment_NotOrderTaken_List_Updated_18Dec(string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize)
    {

        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetShipment_NotOrderTaken_List_Updated_18Dec_Result>("usp_GetShipment_NotOrderTaken_List_Updated_18Dec", searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter);
    }


    public virtual int usp_UpdateShipmenetIsReady(Nullable<int> shipmentId, Nullable<bool> isReady)
    {

        var shipmentIdParameter = shipmentId.HasValue ?
            new ObjectParameter("ShipmentId", shipmentId) :
            new ObjectParameter("ShipmentId", typeof(int));


        var isReadyParameter = isReady.HasValue ?
            new ObjectParameter("IsReady", isReady) :
            new ObjectParameter("IsReady", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateShipmenetIsReady", shipmentIdParameter, isReadyParameter);
    }


    public virtual ObjectResult<usp_GetCompletedNcancelFumList_Result> usp_GetCompletedNcancelFumList(string searchTerm, string sortColumn, string sortedColumns, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> customerId, Nullable<int> statusId, string driverName)
    {

        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortedColumnsParameter = sortedColumns != null ?
            new ObjectParameter("SortedColumns", sortedColumns) :
            new ObjectParameter("SortedColumns", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var startDateParameter = startDate.HasValue ?
            new ObjectParameter("StartDate", startDate) :
            new ObjectParameter("StartDate", typeof(System.DateTime));


        var endDateParameter = endDate.HasValue ?
            new ObjectParameter("EndDate", endDate) :
            new ObjectParameter("EndDate", typeof(System.DateTime));


        var customerIdParameter = customerId.HasValue ?
            new ObjectParameter("CustomerId", customerId) :
            new ObjectParameter("CustomerId", typeof(int));


        var statusIdParameter = statusId.HasValue ?
            new ObjectParameter("StatusId", statusId) :
            new ObjectParameter("StatusId", typeof(int));


        var driverNameParameter = driverName != null ?
            new ObjectParameter("DriverName", driverName) :
            new ObjectParameter("DriverName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCompletedNcancelFumList_Result>("usp_GetCompletedNcancelFumList", searchTermParameter, sortColumnParameter, sortedColumnsParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter, startDateParameter, endDateParameter, customerIdParameter, statusIdParameter, driverNameParameter);
    }


    public virtual ObjectResult<usp_GetOtherFumList_Result> usp_GetOtherFumList(string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize)
    {

        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetOtherFumList_Result>("usp_GetOtherFumList", searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter);
    }


    [DbFunction("LarastruckingDBEntities", "GetFumigationLocation_22Feb")]
    public virtual IQueryable<GetFumigationLocation_22Feb_Result> GetFumigationLocation_22Feb(Nullable<int> fumigationId)
    {

        var fumigationIdParameter = fumigationId.HasValue ?
            new ObjectParameter("FumigationId", fumigationId) :
            new ObjectParameter("FumigationId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetFumigationLocation_22Feb_Result>("[LarastruckingDBEntities].[GetFumigationLocation_22Feb](@FumigationId)", fumigationIdParameter);
    }


    public virtual ObjectResult<usp_GetOrderTakenFumigationList_Result> usp_GetOrderTakenFumigationList(string searchTerm, string sortColumn, string sortedColumns, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize)
    {

        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortedColumnsParameter = sortedColumns != null ?
            new ObjectParameter("SortedColumns", sortedColumns) :
            new ObjectParameter("SortedColumns", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetOrderTakenFumigationList_Result>("usp_GetOrderTakenFumigationList", searchTermParameter, sortColumnParameter, sortedColumnsParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter);
    }


    public virtual ObjectResult<string> usp_MarkDriverAttendance(Nullable<int> userId, Nullable<int> equipmentId, Nullable<bool> isCheckIn, Nullable<System.DateTime> scaneDateTime)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        var equipmentIdParameter = equipmentId.HasValue ?
            new ObjectParameter("EquipmentId", equipmentId) :
            new ObjectParameter("EquipmentId", typeof(int));


        var isCheckInParameter = isCheckIn.HasValue ?
            new ObjectParameter("IsCheckIn", isCheckIn) :
            new ObjectParameter("IsCheckIn", typeof(bool));


        var scaneDateTimeParameter = scaneDateTime.HasValue ?
            new ObjectParameter("ScaneDateTime", scaneDateTime) :
            new ObjectParameter("ScaneDateTime", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_MarkDriverAttendance", userIdParameter, equipmentIdParameter, isCheckInParameter, scaneDateTimeParameter);
    }


    public virtual ObjectResult<string> usp_AddTimeCardDetail(Nullable<int> userId, Nullable<int> equipmentId, Nullable<bool> isCheckIn, Nullable<System.DateTime> scanDateTime, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, string latitude, string longitude, Nullable<bool> isSuccess)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        var equipmentIdParameter = equipmentId.HasValue ?
            new ObjectParameter("EquipmentId", equipmentId) :
            new ObjectParameter("EquipmentId", typeof(int));


        var isCheckInParameter = isCheckIn.HasValue ?
            new ObjectParameter("IsCheckIn", isCheckIn) :
            new ObjectParameter("IsCheckIn", typeof(bool));


        var scanDateTimeParameter = scanDateTime.HasValue ?
            new ObjectParameter("ScanDateTime", scanDateTime) :
            new ObjectParameter("ScanDateTime", typeof(System.DateTime));


        var createdByParameter = createdBy.HasValue ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(int));


        var createdOnParameter = createdOn.HasValue ?
            new ObjectParameter("CreatedOn", createdOn) :
            new ObjectParameter("CreatedOn", typeof(System.DateTime));


        var latitudeParameter = latitude != null ?
            new ObjectParameter("Latitude", latitude) :
            new ObjectParameter("Latitude", typeof(string));


        var longitudeParameter = longitude != null ?
            new ObjectParameter("Longitude", longitude) :
            new ObjectParameter("Longitude", typeof(string));


        var isSuccessParameter = isSuccess.HasValue ?
            new ObjectParameter("IsSuccess", isSuccess) :
            new ObjectParameter("IsSuccess", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_AddTimeCardDetail", userIdParameter, equipmentIdParameter, isCheckInParameter, scanDateTimeParameter, createdByParameter, createdOnParameter, latitudeParameter, longitudeParameter, isSuccessParameter);
    }


    public virtual int usp_GetTimeCardList(string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<int> userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> isProduction)
    {

        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        var startDateParameter = startDate.HasValue ?
            new ObjectParameter("StartDate", startDate) :
            new ObjectParameter("StartDate", typeof(System.DateTime));


        var endDateParameter = endDate.HasValue ?
            new ObjectParameter("EndDate", endDate) :
            new ObjectParameter("EndDate", typeof(System.DateTime));


        var isProductionParameter = isProduction.HasValue ?
            new ObjectParameter("IsProduction", isProduction) :
            new ObjectParameter("IsProduction", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetTimeCardList", searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter, userIdParameter, startDateParameter, endDateParameter, isProductionParameter);
    }


    public virtual ObjectResult<USP_GetLaborReport_Result> USP_GetLaborReport(Nullable<System.DateTime> weekStartDay, Nullable<System.DateTime> weekEndDay, string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isProduction)
    {

        var weekStartDayParameter = weekStartDay.HasValue ?
            new ObjectParameter("WeekStartDay", weekStartDay) :
            new ObjectParameter("WeekStartDay", typeof(System.DateTime));


        var weekEndDayParameter = weekEndDay.HasValue ?
            new ObjectParameter("WeekEndDay", weekEndDay) :
            new ObjectParameter("WeekEndDay", typeof(System.DateTime));


        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var isProductionParameter = isProduction.HasValue ?
            new ObjectParameter("IsProduction", isProduction) :
            new ObjectParameter("IsProduction", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetLaborReport_Result>("USP_GetLaborReport", weekStartDayParameter, weekEndDayParameter, searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter, isProductionParameter);
    }


    public virtual ObjectResult<usp_GetTimeCardCalculation_Result> usp_GetTimeCardCalculation()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTimeCardCalculation_Result>("usp_GetTimeCardCalculation");
    }


    public virtual ObjectResult<USP_GetWeeklyReport_Result> USP_GetWeeklyReport(Nullable<System.DateTime> weekStartDay, Nullable<System.DateTime> weekEndDay, string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isProduction)
    {

        var weekStartDayParameter = weekStartDay.HasValue ?
            new ObjectParameter("WeekStartDay", weekStartDay) :
            new ObjectParameter("WeekStartDay", typeof(System.DateTime));


        var weekEndDayParameter = weekEndDay.HasValue ?
            new ObjectParameter("WeekEndDay", weekEndDay) :
            new ObjectParameter("WeekEndDay", typeof(System.DateTime));


        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var isProductionParameter = isProduction.HasValue ?
            new ObjectParameter("IsProduction", isProduction) :
            new ObjectParameter("IsProduction", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetWeeklyReport_Result>("USP_GetWeeklyReport", weekStartDayParameter, weekEndDayParameter, searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter, isProductionParameter);
    }


    public virtual ObjectResult<USP_TimeCardCalculator_Result> USP_TimeCardCalculator(Nullable<System.DateTime> weekStartDay, Nullable<System.DateTime> weekEndDay, Nullable<bool> isProduction)
    {

        var weekStartDayParameter = weekStartDay.HasValue ?
            new ObjectParameter("WeekStartDay", weekStartDay) :
            new ObjectParameter("WeekStartDay", typeof(System.DateTime));


        var weekEndDayParameter = weekEndDay.HasValue ?
            new ObjectParameter("WeekEndDay", weekEndDay) :
            new ObjectParameter("WeekEndDay", typeof(System.DateTime));


        var isProductionParameter = isProduction.HasValue ?
            new ObjectParameter("IsProduction", isProduction) :
            new ObjectParameter("IsProduction", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_TimeCardCalculator_Result>("USP_TimeCardCalculator", weekStartDayParameter, weekEndDayParameter, isProductionParameter);
    }


    [DbFunction("LarastruckingDBEntities", "fun_GetShipmentList")]
    public virtual IQueryable<fun_GetShipmentList_Result> fun_GetShipmentList(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
    {

        var startDateParameter = startDate.HasValue ?
            new ObjectParameter("StartDate", startDate) :
            new ObjectParameter("StartDate", typeof(System.DateTime));


        var endDateParameter = endDate.HasValue ?
            new ObjectParameter("EndDate", endDate) :
            new ObjectParameter("EndDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fun_GetShipmentList_Result>("[LarastruckingDBEntities].[fun_GetShipmentList](@StartDate, @EndDate)", startDateParameter, endDateParameter);
    }


    [DbFunction("LarastruckingDBEntities", "GetFumigationLocationArchive")]
    public virtual IQueryable<GetFumigationLocationArchive_Result> GetFumigationLocationArchive(Nullable<int> fumigationId)
    {

        var fumigationIdParameter = fumigationId.HasValue ?
            new ObjectParameter("FumigationId", fumigationId) :
            new ObjectParameter("FumigationId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetFumigationLocationArchive_Result>("[LarastruckingDBEntities].[GetFumigationLocationArchive](@FumigationId)", fumigationIdParameter);
    }


    [DbFunction("LarastruckingDBEntities", "GetFumigationLocationOld")]
    public virtual IQueryable<GetFumigationLocationOld_Result> GetFumigationLocationOld(Nullable<int> fumigationId)
    {

        var fumigationIdParameter = fumigationId.HasValue ?
            new ObjectParameter("FumigationId", fumigationId) :
            new ObjectParameter("FumigationId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetFumigationLocationOld_Result>("[LarastruckingDBEntities].[GetFumigationLocationOld](@FumigationId)", fumigationIdParameter);
    }


    public virtual int usp_GetALLShipmentList(string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> customerId, Nullable<int> statusId, Nullable<int> freightTypeId)
    {

        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var startDateParameter = startDate.HasValue ?
            new ObjectParameter("StartDate", startDate) :
            new ObjectParameter("StartDate", typeof(System.DateTime));


        var endDateParameter = endDate.HasValue ?
            new ObjectParameter("EndDate", endDate) :
            new ObjectParameter("EndDate", typeof(System.DateTime));


        var customerIdParameter = customerId.HasValue ?
            new ObjectParameter("CustomerId", customerId) :
            new ObjectParameter("CustomerId", typeof(int));


        var statusIdParameter = statusId.HasValue ?
            new ObjectParameter("StatusId", statusId) :
            new ObjectParameter("StatusId", typeof(int));


        var freightTypeIdParameter = freightTypeId.HasValue ?
            new ObjectParameter("FreightTypeId", freightTypeId) :
            new ObjectParameter("FreightTypeId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetALLShipmentList", searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter, startDateParameter, endDateParameter, customerIdParameter, statusIdParameter, freightTypeIdParameter);
    }


    public virtual int usp_GetCompletedNcancelFumList1(string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> customerId, Nullable<int> statusId, string driverName)
    {

        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var startDateParameter = startDate.HasValue ?
            new ObjectParameter("StartDate", startDate) :
            new ObjectParameter("StartDate", typeof(System.DateTime));


        var endDateParameter = endDate.HasValue ?
            new ObjectParameter("EndDate", endDate) :
            new ObjectParameter("EndDate", typeof(System.DateTime));


        var customerIdParameter = customerId.HasValue ?
            new ObjectParameter("CustomerId", customerId) :
            new ObjectParameter("CustomerId", typeof(int));


        var statusIdParameter = statusId.HasValue ?
            new ObjectParameter("StatusId", statusId) :
            new ObjectParameter("StatusId", typeof(int));


        var driverNameParameter = driverName != null ?
            new ObjectParameter("DriverName", driverName) :
            new ObjectParameter("DriverName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetCompletedNcancelFumList1", searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter, startDateParameter, endDateParameter, customerIdParameter, statusIdParameter, driverNameParameter);
    }


    public virtual ObjectResult<usp_GetFumigationDriverList_Result> usp_GetFumigationDriverList()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFumigationDriverList_Result>("usp_GetFumigationDriverList");
    }


    public virtual ObjectResult<usp_GetFumigationList_Test_Result> usp_GetFumigationList_Test(string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize)
    {

        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFumigationList_Test_Result>("usp_GetFumigationList_Test", searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter);
    }


    public virtual ObjectResult<usp_GetShipment_NotOrderTaken_List_Text_Result> usp_GetShipment_NotOrderTaken_List_Text(string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize)
    {

        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetShipment_NotOrderTaken_List_Text_Result>("usp_GetShipment_NotOrderTaken_List_Text", searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter);
    }


    public virtual ObjectResult<usp_GetShipment_OrderTaken_List_Text_Result> usp_GetShipment_OrderTaken_List_Text(string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize)
    {

        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetShipment_OrderTaken_List_Text_Result>("usp_GetShipment_OrderTaken_List_Text", searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter);
    }


    public virtual ObjectResult<usp_GetShipment_OrderTaken_List_Updated_18Dec_Result> usp_GetShipment_OrderTaken_List_Updated_18Dec(string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize)
    {

        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetShipment_OrderTaken_List_Updated_18Dec_Result>("usp_GetShipment_OrderTaken_List_Updated_18Dec", searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter);
    }


    public virtual ObjectResult<usp_GetShipmentLists_Result> usp_GetShipmentLists(string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> customerId, Nullable<int> statusId, Nullable<int> freightTypeId)
    {

        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var startDateParameter = startDate.HasValue ?
            new ObjectParameter("StartDate", startDate) :
            new ObjectParameter("StartDate", typeof(System.DateTime));


        var endDateParameter = endDate.HasValue ?
            new ObjectParameter("EndDate", endDate) :
            new ObjectParameter("EndDate", typeof(System.DateTime));


        var customerIdParameter = customerId.HasValue ?
            new ObjectParameter("CustomerId", customerId) :
            new ObjectParameter("CustomerId", typeof(int));


        var statusIdParameter = statusId.HasValue ?
            new ObjectParameter("StatusId", statusId) :
            new ObjectParameter("StatusId", typeof(int));


        var freightTypeIdParameter = freightTypeId.HasValue ?
            new ObjectParameter("FreightTypeId", freightTypeId) :
            new ObjectParameter("FreightTypeId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetShipmentLists_Result>("usp_GetShipmentLists", searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter, startDateParameter, endDateParameter, customerIdParameter, statusIdParameter, freightTypeIdParameter);
    }


    public virtual ObjectResult<usp_GetShipmentLists_20201021_Result> usp_GetShipmentLists_20201021(string searchTerm, string sortColumn, string sortOrder, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> customerId, Nullable<int> statusId, Nullable<int> freightTypeId)
    {

        var searchTermParameter = searchTerm != null ?
            new ObjectParameter("SearchTerm", searchTerm) :
            new ObjectParameter("SearchTerm", typeof(string));


        var sortColumnParameter = sortColumn != null ?
            new ObjectParameter("SortColumn", sortColumn) :
            new ObjectParameter("SortColumn", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("PageNumber", pageNumber) :
            new ObjectParameter("PageNumber", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var startDateParameter = startDate.HasValue ?
            new ObjectParameter("StartDate", startDate) :
            new ObjectParameter("StartDate", typeof(System.DateTime));


        var endDateParameter = endDate.HasValue ?
            new ObjectParameter("EndDate", endDate) :
            new ObjectParameter("EndDate", typeof(System.DateTime));


        var customerIdParameter = customerId.HasValue ?
            new ObjectParameter("CustomerId", customerId) :
            new ObjectParameter("CustomerId", typeof(int));


        var statusIdParameter = statusId.HasValue ?
            new ObjectParameter("StatusId", statusId) :
            new ObjectParameter("StatusId", typeof(int));


        var freightTypeIdParameter = freightTypeId.HasValue ?
            new ObjectParameter("FreightTypeId", freightTypeId) :
            new ObjectParameter("FreightTypeId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetShipmentLists_20201021_Result>("usp_GetShipmentLists_20201021", searchTermParameter, sortColumnParameter, sortOrderParameter, pageNumberParameter, pageSizeParameter, startDateParameter, endDateParameter, customerIdParameter, statusIdParameter, freightTypeIdParameter);
    }


    public virtual int usp_UpdateFumigationSTReady(Nullable<int> fumigationId, Nullable<bool> sTReady)
    {

        var fumigationIdParameter = fumigationId.HasValue ?
            new ObjectParameter("FumigationId", fumigationId) :
            new ObjectParameter("FumigationId", typeof(int));


        var sTReadyParameter = sTReady.HasValue ?
            new ObjectParameter("STReady", sTReady) :
            new ObjectParameter("STReady", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateFumigationSTReady", fumigationIdParameter, sTReadyParameter);
    }


    public virtual int usp_UpdateFumigationWTReady(Nullable<int> fumigationId, Nullable<bool> wTReady)
    {

        var fumigationIdParameter = fumigationId.HasValue ?
            new ObjectParameter("FumigationId", fumigationId) :
            new ObjectParameter("FumigationId", typeof(int));


        var wTReadyParameter = wTReady.HasValue ?
            new ObjectParameter("WTReady", wTReady) :
            new ObjectParameter("WTReady", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateFumigationWTReady", fumigationIdParameter, wTReadyParameter);
    }


    public virtual int usp_UpdateShipmenetSTReady(Nullable<int> shipmentId, Nullable<bool> sTReady)
    {

        var shipmentIdParameter = shipmentId.HasValue ?
            new ObjectParameter("ShipmentId", shipmentId) :
            new ObjectParameter("ShipmentId", typeof(int));


        var sTReadyParameter = sTReady.HasValue ?
            new ObjectParameter("STReady", sTReady) :
            new ObjectParameter("STReady", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateShipmenetSTReady", shipmentIdParameter, sTReadyParameter);
    }


    public virtual int usp_UpdateShipmenetWTReady(Nullable<int> shipmentId, Nullable<bool> wTReady)
    {

        var shipmentIdParameter = shipmentId.HasValue ?
            new ObjectParameter("ShipmentId", shipmentId) :
            new ObjectParameter("ShipmentId", typeof(int));


        var wTReadyParameter = wTReady.HasValue ?
            new ObjectParameter("WTReady", wTReady) :
            new ObjectParameter("WTReady", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateShipmenetWTReady", shipmentIdParameter, wTReadyParameter);
    }

}

}

